*ddt.txt*	Dark Deno Terminal interface for Vim/Neovim

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS                                                        *ddt-contents*

Introduction		|ddt-introduction|
Install			|ddt-install|
Interface		|ddt-interface|
  Options		  |ddt-options|
  Functions		  |ddt-functions|
  Custom Functions	  |ddt-custom-functions|
  UI Functions		  |ddt-ui-functions|
Ddu Sources		|ddt-ddu-sources|
Examples		|ddt-examples|
UIs			|ddt-uis|
  UI option	          |ddt-ui-options|
  UI params	          |ddt-ui-params|
  UI variables	          |ddt-ui-variables|
Create UI		|ddt-create-ui|
  UI attributes		  |ddt-ui-attributes|
FAQ			|ddt-faq|
Compatibility		|ddt-compatibility|


==============================================================================
INTRODUCTION                                                *ddt-introduction*

*ddt* is the abbreviation of "Dark Deno Terminal interface".

If you don't want to configure plugins, you don't have to use the plugin. It
does not work with zero configuration. You can use other plugins.


==============================================================================
INSTALL                                                          *ddt-install*

NOTE: ddt.vim requires Vim 9.1.0448+ or Neovim 0.10.0+ (latest is
recommended).

Please install both Deno 1.45+ and "denops.vim" v7.0+.

https://deno.land/
https://github.com/vim-denops/denops.vim

You need to install ddt-ui plugins like this.

https://github.com/Shougo/ddt-ui-terminal
https://github.com/Shougo/ddt-ui-shell

==============================================================================
INTERFACE                                                      *ddt-interface*

------------------------------------------------------------------------------
OPTIONS                                                          *ddt-options*

                                                             *ddt-option-name*
name			(string)
		Specify the name.

		Default: "default"

                                                       *ddt-option-nvimServer*
nvimServer
		The path of Neovim server.  Please see |client-server|.
		NOTE: It is Neovim only.
		NOTE: It is not implemented yet.

		Default: ""

                                                               *ddt-option-ui*
ui			(string | dictionary)
		Specify UI name or elements which are formatted as:
>
		#{
		    name: {ui-name},
		    options: {ui-options},
		    params: {ui-params},
		}
<
		If it is empty string, it is ignored.
		NOTE: You must set the option in the first.

		Default: ""

                                                        *ddt-option-uiOptions*
uiOptions		(dictionary)
		It is a dictionary that maps UI names to its options.
		The options with the name "_" is used as the options for all
		names.
		See also |ddt-ui-options|.

		Default: {}

                                                         *ddt-option-uiParams*
uiParams		(dictionary)
		It is a dictionary that maps UI names to its parameters.
		See also |ddt-ui-params|.

		Default: {}


------------------------------------------------------------------------------
FUNCTIONS                                                      *ddt-functions*

                                                             *ddt#get_input()*
ddt#get_input({name})
		Get the command line input from current cursor.

		{name} is specified ddt name(|ddt-option-name|).

                                                                 *ddt#start()*
ddt#start([{options}])
		Creates a new Ddt.
		NOTE: It can be called by "start" dispatcher in TypeScript.
		NOTE: It must be called after |DenopsReady|.
		NOTE: It does not work in |command-line-window|.

		Refer to |ddt-options| about {options}.  If you skip a value,
		it uses the default value.

                                                             *ddt#ui_action()*
ddt#ui_action({name}, {action}[, {params}])
		Do the {action} action in current UI synchronously.

		{name} is specified ddt name(|ddt-option-name|).

		{params} is action params.
		NOTE: It does not work in |command-line-window|.
		NOTE: You must not call it in |autocmd|.

CUSTOM FUNCTIONS                                        *ddt-custom-functions*

                                                    *ddt#custom#load_config()*
ddt#custom#load_config({path})
		Load TypeScript configuration from {path} file.
		NOTE: {path} must be full path.
		NOTE: The loading is asynchronous.

                                                   *ddt#custom#patch_global()*
ddt#custom#patch_global({option-name}, {value})
ddt#custom#patch_global({dict})
		Set {option-name} option to {value}.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |ddt-options| for available {option-name}.

                                                    *ddt#custom#patch_local()*
ddt#custom#patch_local({ddt-name}, {option-name}, {value})
ddt#custom#patch_local({ddt-name}, {dict})
		Set local options for specific |ddt-option-name|.
		The arguments are the same as for |ddt#custom#patch_global()|.

                                                     *ddt#custom#set_global()*
ddt#custom#set_global({dict})
		Overwrites all options to {dict}.
		The key is {option-name} and the value is {value}. See
		|ddt-options| for available {option-name}.

                                                      *ddt#custom#set_local()*
ddt#custom#set_local({ddt-name}, {dict})
		Set local options for specific |ddt-option-name|.
		The arguments are the same as for |ddt#custom#set_global()|.

UI FUNCTIONS                                                *ddt-ui-functions*

                                                          *ddt#ui#do_action()*
ddt#ui#do_action({action}[, {params}])
		Do the {action} action in current UI synchronously.

		{params} is action params.
		NOTE: You must not call it in |autocmd|.

                                                          *ddt#ui#get_input()*
ddt#ui#get_input()
		Get the command line input from current cursor.

                                                        *ddt#ui#kill_editor()*
ddt#ui#kill_editor()
		Kill the current buffer and return to the last ddt ui.
		It is useful to use git editor.

==============================================================================
DDU SOURCES                                                  *ddt-ddu-sources*

                                            *ddt-ddu-source-ddt_shell_history*
ddt_shell_history
		Gather shell history.

                                     *ddt-ddu-source-ddt_shell_history-params*

		limit	(number)
			The limit of history lines in each history.

			Default: 500

		paths	(string[])
			History file path list.

			Default: []

                                                      *ddt-ddu-source-ddt_tab*
ddt_tab
		Gather ddt from tabs.

==============================================================================
EXAMPLES                                                        *ddt-examples*
>
<

==============================================================================
UIS                                                                  *ddt-uis*

The UIs are used to display items.

NOTE: The UIs are not bundled in ddt.vim.  You need to install them
to use ddt.vim.  Please search them by https://github.com/topics/ddt-ui


------------------------------------------------------------------------------
UI OPTIONS                                                    *ddt-ui-options*

NOTE: The UIs cannot set default options.  If they need to specify the
recommended configuration, you should write it in the documentation instead.

                                                       *ddt-ui-option-actions*
actions			(Record<string, function>)
		Overwrites UI actions.


------------------------------------------------------------------------------
UI PARAMS                                                      *ddt-ui-params*

These are the parameters that each UI can have.  Please read the UI
documentation.

------------------------------------------------------------------------------
UI VARIABLES                                                *ddt-ui-variables*

You can get UI information from variables.

                                               *ddt-ui-variable-b:ddt_ui_name*
b:ddt_ui_name		(string)
		|ddt-option-name| in current UI.

                                         *ddt-ui-variable-g:ddt_ui_last_winid*
g:ddt_ui_last_winid	(number)
		The last UI window ID.

                                         *ddt-ui-variable-t:ddt_ui_last_bufnr*
t:ddt_ui_last_bufnr	(number)
		The last UI buffer number in current tab.

                                     *ddt-ui-variable-t:ddt_ui_last_directory*
t:ddt_ui_last_directory	(number)
		The last UI current directory in current tab.


==============================================================================
CREATE UI                                                      *ddt-create-ui*

To create UI, you should read other UIs implementation.

The UIs must put under "denops/@ddt-uis/*.ts".

UI class must extend the BaseUi class.

NOTE: It must be written in TypeScript language.

NOTE: If you call Vim functions, it is not asynchronous.


------------------------------------------------------------------------------
UI ATTRIBUTES                                              *ddt-ui-attributes*

                                                    *ddt-ui-attribute-actions*
actions			(Record<string, function>)	(Required)
		Defines UI actions.
		The actions are called from |ddt#ui_action()|.

                                                   *ddt-ui-attribute-getInput*
getInput		(function)			(Required)
		Called when get input command line.

                                                     *ddt-ui-attribute-redraw*
redraw			(function)			(Required)
		Called when redraw UI.


==============================================================================
FAQ                                                                  *ddt-faq*

FAQ 1:                                                             |ddt-faq-1|
	How to donate money to you?

FAQ 2:                                                             |ddt-faq-2|
	What means "dark powered"?

FAQ 3:                                                             |ddt-faq-3|
	Why ddt.vim uses Deno?

------------------------------------------------------------------------------
                                                                   *ddt-faq-1*
Q: How to donate money to you?

A: I have started github sponsorship to spend more time for Vim/Neovim
plugins.  You can donate money to help me!

   https://github.com/sponsors/Shougo

                                                                   *ddt-faq-2*
Q: What means "dark powered"?

A: I think text editor is everything in the world. I want to do everything in
Vim(Neovim) like Emacs. It is not allowed by |design-not| in Vim. It is not
the light way to use Vim. So I have defined it as the dark way. I am the dark
Vimmer. My plugins are dark powered.

                                                                   *ddt-faq-3*
Q: Why ddt.vim uses Deno?

A: Deno is asynchronous and faster than Vim script and it can be used in both
Vim and Neovim.  The features are what I desired.
I have created some plugins by TypeScript.  The development is very fun and
easy to maintain.

==============================================================================
COMPATIBILITY                                              *ddt-compatibility*

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
